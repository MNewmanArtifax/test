name: Sync from Bitbucket
on:
  schedule:
    - cron: '0 6 * * *'  # Run daily at 6 AM UTC
  workflow_dispatch:

jobs:
  sync:
    runs-on: ubuntu-latest
    env:
      GH_PAT: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Set up Git config
        run: |
          git config --global user.name "GitHub Action Sync Bot"
          git config --global user.email "actions@git-sync.com"

      - name: Checkout GitHub repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Add Bitbucket remote
        run: |
          git remote add bitbucket https://$BITBUCKET_USERNAME:$BITBUCKET_APP_PASSWORD@bitbucket.org/artifax-development/artifax-event-public.git
        env:
          BITBUCKET_USERNAME: ${{ secrets.BITBUCKET_USERNAME }}
          BITBUCKET_APP_PASSWORD: ${{ secrets.BITBUCKET_APP_PASSWORD }}

      - name: Fetch all branches from Bitbucket
        run: |
          git fetch bitbucket "+refs/heads/*:refs/remotes/bitbucket/*"

      - name: Confirm GITHUB_TOKEN availability
        run: |
          if [ -z "$GH_PAT" ]; then
            echo "‚ùå GITHUB_TOKEN is not set."
            exit 1
          else
            echo "‚úÖ GITHUB_TOKEN is available."
          fi

      # Always backup protected folders first, regardless of branch processing
      - name: Backup protected folders from GitHub
        run: |
          echo "üìÅ Backing up protected folders from current GitHub state..."
          mkdir -p _preserve
          
          # Make sure we're on GitHub's master to backup from the right place
          git checkout master 2>/dev/null || git checkout main 2>/dev/null || echo "No master/main branch found"
          
          # Backup .github/workflows if it exists
          if [ -d ".github/workflows" ]; then
            cp -r .github/workflows _preserve/
            echo "  ‚úì Backed up .github/workflows from GitHub"
            echo "  üìã Backed up files:"
            ls -la _preserve/workflows/
          else
            echo "  ‚ö†Ô∏è  .github/workflows not found on GitHub master"
          fi

      - name: Mirror only recently updated Bitbucket branches to GitHub
        run: |
          NOW=$(date +%s)
          SYNCED_COUNT=0
          SKIPPED_COUNT=0
          FAILED_COUNT=0
          TOTAL_COMMITS=0
          PROTECTED_RESTORED=false
          
          echo "üîç Starting sync process at $(date -u +'%Y-%m-%d %H:%M:%S UTC')"
          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
          
          TOTAL_BRANCHES=$(git for-each-ref --format='%(refname:strip=3)' refs/remotes/bitbucket/ | wc -l)
          echo "üìä Found $TOTAL_BRANCHES branches in Bitbucket"
          echo ""
          
          # Write branch info to temporary file to avoid subshell issue
          git for-each-ref --format='%(refname:strip=3) %(committerdate:iso8601)' refs/remotes/bitbucket/ > branch_list.txt
          
          while IFS= read -r line; do
            BRANCH=$(echo "$line" | cut -d' ' -f1)
            DATE=$(echo "$line" | cut -d' ' -f2-)
            TS=$(date -d "$DATE" +%s)
            AGE=$(( (NOW - TS) / 86400 ))
            
            if [ "$AGE" -ge 1 ]; then
              echo "‚è≠Ô∏è  Skipping $BRANCH (last updated $AGE days ago on $(date -d "$DATE" +'%Y-%m-%d'))"
              SKIPPED_COUNT=$((SKIPPED_COUNT + 1))
              continue
            fi
            
            if [ "$BRANCH" = "sync" ] || [ "$BRANCH" = "HEAD" ]; then
              echo "üîÅ Skipping $BRANCH branch (internal branch)"
              SKIPPED_COUNT=$((SKIPPED_COUNT + 1))
              continue
            fi
            
            echo ""
            echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
            echo "üîÑ Processing branch: $BRANCH"
            echo "üìÖ Last updated: $(date -d "$DATE" +'%Y-%m-%d %H:%M:%S')"
            if [ "$BRANCH" = "master" ]; then
              echo "‚ö†Ô∏è  Master branch will be synced - protected folders will be restored"
            fi
            echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
            
            echo "üîÄ Checking out $BRANCH from Bitbucket..."
            git checkout -B "$BRANCH" "bitbucket/$BRANCH"
            
            # Count new commits being synced
            if git rev-parse --verify origin/"$BRANCH" >/dev/null 2>&1; then
              # Branch exists on GitHub, count new commits
              NEW_COMMITS=$(git rev-list --count origin/"$BRANCH"..HEAD 2>/dev/null || echo "0")
              if [ "$NEW_COMMITS" -gt 0 ]; then
                echo "üìà Found $NEW_COMMITS new commit(s) to sync"
              else
                echo "üìä Branch is up to date (0 new commits)"
              fi
            else
              # New branch - find commits unique to this branch
              BASE_BRANCH=""
              if git rev-parse --verify origin/master >/dev/null 2>&1; then
                BASE_BRANCH="origin/master"
              elif git rev-parse --verify origin/main >/dev/null 2>&1; then
                BASE_BRANCH="origin/main"
              fi
              
              if [ -n "$BASE_BRANCH" ]; then
                MERGE_BASE=$(git merge-base HEAD "$BASE_BRANCH" 2>/dev/null || echo "")
                if [ -n "$MERGE_BASE" ]; then
                  NEW_COMMITS=$(git rev-list --count "$MERGE_BASE"..HEAD 2>/dev/null || echo "0")
                  echo "üÜï New branch with $NEW_COMMITS unique commit(s) (since $BASE_BRANCH)"
                else
                  NEW_COMMITS=$(git rev-list --count HEAD 2>/dev/null || echo "0")
                  echo "üÜï New branch with $NEW_COMMITS commit(s) (total)"
                fi
              else
                NEW_COMMITS=$(git rev-list --count HEAD 2>/dev/null || echo "0")
                echo "üÜï New branch with $NEW_COMMITS commit(s) (no base branch found)"
              fi
            fi
            
            # Restore protected folders on master branch from our backup
            if [ "$BRANCH" = "master" ]; then
              echo "‚ôªÔ∏è  Restoring protected folders for master branch..."
              RESTORED=false
              
              # Restore workflows from backup
              if [ -d "_preserve/workflows" ]; then
                mkdir -p .github
                cp -r _preserve/workflows .github/
                echo "  ‚úì Restored .github/workflows"
                echo "  üìã Restored files:"
                ls -la .github/workflows/
                RESTORED=true
              else
                echo "  ‚ö†Ô∏è  No workflows backup found to restore"
              fi
              
              if [ "$RESTORED" = true ]; then
                git add .
                if git diff --staged --quiet; then
                  echo "  ‚Ü™ No changes to commit (files already match)"
                else
                  git commit -m "üõ°Ô∏è Restore protected files (.github/workflows)"
                  echo "  ‚úÖ Committed restored protected folders"
                  PROTECTED_RESTORED=true
                fi
              fi
            fi
            
            echo "üì§ Pushing to GitHub..."
            if git push "https://x-access-token:${GH_PAT}@github.com/artifax-development/artifax-event-public.git" HEAD:refs/heads/"$BRANCH" --force-with-lease 2>&1 | tee push_output.txt; then
              echo "‚úÖ Successfully synced $BRANCH"
              SYNCED_COUNT=$((SYNCED_COUNT + 1))
              TOTAL_COMMITS=$((TOTAL_COMMITS + NEW_COMMITS))
            else
              echo "‚ùå Failed to sync $BRANCH"
              echo "Error details:"
              cat push_output.txt
              FAILED_COUNT=$((FAILED_COUNT + 1))
            fi
            rm -f push_output.txt
          done < branch_list.txt
          
          echo "üîç DEBUG: Finished processing all branches, moving to cleanup..."
          
          # Always clean up temporary file, even if there are errors
          rm -f branch_list.txt
          
          echo "üîç DEBUG: Cleaned up branch_list.txt, generating summary..."
          
          echo ""
          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
          echo "üìä SYNC SUMMARY"
          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
          echo "‚úÖ Synced: $SYNCED_COUNT branches"
          echo "üìù Total commits: $TOTAL_COMMITS"
          echo "‚è≠Ô∏è  Skipped: $SKIPPED_COUNT branches"
          echo "‚ùå Failed: $FAILED_COUNT branches"
          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
          echo "üõ°Ô∏è  PROTECTED FOLDERS STATUS"
          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
          if [ "$PROTECTED_RESTORED" = true ]; then
            echo "‚ôªÔ∏è  Protected files: Successfully restored ‚úì"
          elif [ "$SYNCED_COUNT" -gt 0 ]; then
            echo "‚ôªÔ∏è  Protected files: Not needed (master not synced) ‚úì"
          else
            echo "‚ôªÔ∏è  Protected files: No branches synced"
          fi
          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
          echo "üèÅ Sync completed at $(date -u +'%Y-%m-%d %H:%M:%S UTC')"
          
          if [ "$FAILED_COUNT" -gt 0 ]; then
            echo ""
            echo "‚ö†Ô∏è  WARNING: Some branches failed to sync!"
            exit 1
          fi
