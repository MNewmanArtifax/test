name: Full Mirror Sync from Bitbucket
on:
  workflow_dispatch:
    inputs:
      force_push:
        description: 'Use force push (destructive - will overwrite GitHub history)'
        required: false
        default: false
        type: boolean
      delete_extra_branches:
        description: 'Delete branches that exist on GitHub but not on Bitbucket'
        required: false
        default: false
        type: boolean
      preserve_workflows:
        description: 'Preserve .github/workflows folder on master branch'
        required: false
        default: true
        type: boolean

jobs:
  full-mirror:
    runs-on: ubuntu-latest
    env:
      GH_PAT: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Set up Git config
        run: |
          git config --global user.name "GitHub Action Full Mirror Bot"
          git config --global user.email "actions@git-mirror.com"

      - name: Checkout GitHub repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Add Bitbucket remote
        run: |
          git remote add bitbucket https://$BITBUCKET_USERNAME:$BITBUCKET_APP_PASSWORD@bitbucket.org/GrosvenorSystems/propman.git
        env:
          BITBUCKET_USERNAME: ${{ secrets.BITBUCKET_USERNAME }}
          BITBUCKET_APP_PASSWORD: ${{ secrets.BITBUCKET_APP_PASSWORD }}

      - name: Fetch all branches and tags from Bitbucket
        run: |
          echo "üîç Fetching all branches and tags from Bitbucket..."
          git fetch bitbucket "+refs/heads/*:refs/remotes/bitbucket/*"
          git fetch bitbucket "+refs/tags/*:refs/tags/*"
          echo "‚úÖ Fetch complete"

      - name: Confirm GITHUB_TOKEN availability
        run: |
          if [ -z "$GH_PAT" ]; then
            echo "‚ùå GITHUB_TOKEN is not set."
            exit 1
          else
            echo "‚úÖ GITHUB_TOKEN is available."
          fi

      - name: Backup protected folders (if enabled)
        if: ${{ github.event.inputs.preserve_workflows == 'true' }}
        run: |
          echo "üìÅ Backing up protected folders from current GitHub state..."
          mkdir -p _preserve
          
          # Make sure we're on GitHub's master/main to backup from the right place
          git checkout master 2>/dev/null || git checkout main 2>/dev/null || echo "No master/main branch found"
          
          # Backup .github/workflows if it exists
          if [ -d ".github/workflows" ]; then
            cp -r .github/workflows _preserve/
            echo "  ‚úì Backed up .github/workflows from GitHub"
            echo "  üìã Backed up files:"
            ls -la _preserve/workflows/
          else
            echo "  ‚ö†Ô∏è  .github/workflows not found on GitHub master"
          fi

      - name: Mirror all Bitbucket branches to GitHub
        run: |
          SYNCED_COUNT=0
          FAILED_COUNT=0
          TOTAL_COMMITS=0
          PROTECTED_RESTORED=false
          FORCE_PUSH="${{ github.event.inputs.force_push }}"
          PRESERVE_WORKFLOWS="${{ github.event.inputs.preserve_workflows }}"
          
          echo "üîç Starting full mirror sync at $(date -u +'%Y-%m-%d %H:%M:%S UTC')"
          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
          echo "‚öôÔ∏è  Configuration:"
          echo "   Force push: $FORCE_PUSH"
          echo "   Preserve workflows: $PRESERVE_WORKFLOWS"
          echo "   Delete extra branches: ${{ github.event.inputs.delete_extra_branches }}"
          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
          
          TOTAL_BRANCHES=$(git for-each-ref --format='%(refname:strip=3)' refs/remotes/bitbucket/ | wc -l)
          echo "üìä Found $TOTAL_BRANCHES branches in Bitbucket to mirror"
          echo ""
          
          # Write branch info to temporary file
          git for-each-ref --format='%(refname:strip=3) %(committerdate:iso8601)' refs/remotes/bitbucket/ > branch_list.txt
          
          while IFS= read -r line; do
            BRANCH=$(echo "$line" | cut -d' ' -f1)
            DATE=$(echo "$line" | cut -d' ' -f2-)
            
            # Skip internal branches
            if [ "$BRANCH" = "sync" ] || [ "$BRANCH" = "HEAD" ]; then
              echo "üîÅ Skipping $BRANCH branch (internal branch)"
              continue
            fi
            
            echo ""
            echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
            echo "üîÑ Processing branch: $BRANCH"
            echo "üìÖ Last updated: $(date -d "$DATE" +'%Y-%m-%d %H:%M:%S')"
            if [ "$BRANCH" = "master" ] && [ "$PRESERVE_WORKFLOWS" = "true" ]; then
              echo "‚ö†Ô∏è  Master branch - protected folders will be restored"
            fi
            echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
            
            echo "üîÄ Checking out $BRANCH from Bitbucket..."
            git checkout -B "$BRANCH" "bitbucket/$BRANCH"
            
            # Count commits for reporting
            if git rev-parse --verify origin/"$BRANCH" >/dev/null 2>&1; then
              # Branch exists on GitHub
              if [ "$FORCE_PUSH" = "true" ]; then
                TOTAL_COMMITS_BRANCH=$(git rev-list --count HEAD 2>/dev/null || echo "0")
                echo "üîÑ Force push enabled - will overwrite with $TOTAL_COMMITS_BRANCH commit(s)"
              else
                NEW_COMMITS=$(git rev-list --count origin/"$BRANCH"..HEAD 2>/dev/null || echo "0")
                if [ "$NEW_COMMITS" -gt 0 ]; then
                  echo "üìà Found $NEW_COMMITS new commit(s) to sync"
                else
                  echo "üìä Branch is up to date (0 new commits)"
                fi
                TOTAL_COMMITS_BRANCH=$NEW_COMMITS
              fi
            else
              # New branch
              TOTAL_COMMITS_BRANCH=$(git rev-list --count HEAD 2>/dev/null || echo "0")
              echo "üÜï New branch with $TOTAL_COMMITS_BRANCH commit(s)"
            fi
            
            # Restore protected folders on master branch if enabled
            if [ "$BRANCH" = "master" ] && [ "$PRESERVE_WORKFLOWS" = "true" ]; then
              echo "‚ôªÔ∏è  Restoring protected folders for master branch..."
              RESTORED=false
              
              # Restore workflows from backup
              if [ -d "_preserve/workflows" ]; then
                mkdir -p .github
                cp -r _preserve/workflows .github/
                echo "  ‚úì Restored .github/workflows"
                echo "  üìã Restored files:"
                ls -la .github/workflows/
                RESTORED=true
              else
                echo "  ‚ö†Ô∏è  No workflows backup found to restore"
              fi
              
              if [ "$RESTORED" = true ]; then
                git add .
                if git diff --staged --quiet; then
                  echo "  ‚Ü™ No changes to commit (files already match)"
                else
                  git commit -m "üõ°Ô∏è Restore protected files (.github/workflows)"
                  echo "  ‚úÖ Committed restored protected folders"
                  PROTECTED_RESTORED=true
                fi
              fi
            fi
            
            # Determine push strategy
            if [ "$FORCE_PUSH" = "true" ]; then
              PUSH_ARGS="--force"
              echo "üì§ Force pushing to GitHub..."
            else
              PUSH_ARGS="--force-with-lease"
              echo "üì§ Pushing to GitHub with lease protection..."
            fi
            
            # Push to GitHub
            if git push "https://x-access-token:${GH_PAT}@github.com/grosvenorsystems/propman.git" HEAD:refs/heads/"$BRANCH" $PUSH_ARGS 2>&1 | tee push_output.txt; then
              echo "‚úÖ Successfully synced $BRANCH"
              SYNCED_COUNT=$((SYNCED_COUNT + 1))
              TOTAL_COMMITS=$((TOTAL_COMMITS + TOTAL_COMMITS_BRANCH))
            else
              echo "‚ùå Failed to sync $BRANCH"
              echo "Error details:"
              cat push_output.txt
              FAILED_COUNT=$((FAILED_COUNT + 1))
            fi
            rm -f push_output.txt
          done < branch_list.txt
          
          # Clean up temporary file
          rm -f branch_list.txt
          
          echo ""
          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
          echo "üìä MIRROR SYNC SUMMARY"
          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
          echo "‚úÖ Synced: $SYNCED_COUNT branches"
          echo "üìù Total commits: $TOTAL_COMMITS"
          echo "‚ùå Failed: $FAILED_COUNT branches"
          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
          echo "üõ°Ô∏è  PROTECTED FOLDERS STATUS"
          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
          if [ "$PRESERVE_WORKFLOWS" = "true" ]; then
            if [ "$PROTECTED_RESTORED" = true ]; then
              echo "‚ôªÔ∏è  Protected files: Successfully restored ‚úì"
            elif [ "$SYNCED_COUNT" -gt 0 ]; then
              echo "‚ôªÔ∏è  Protected files: Not needed (master not synced) ‚úì"
            else
              echo "‚ôªÔ∏è  Protected files: No branches synced"
            fi
          else
            echo "‚ôªÔ∏è  Protected files: Preservation disabled"
          fi
          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
          
          if [ "$FAILED_COUNT" -gt 0 ]; then
            echo ""
            echo "‚ö†Ô∏è  WARNING: Some branches failed to sync!"
            exit 1
          fi

      - name: Sync tags from Bitbucket
        run: |
          echo ""
          echo "üè∑Ô∏è  Syncing tags from Bitbucket..."
          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
          
          TAG_COUNT=0
          FAILED_TAGS=0
          FORCE_PUSH="${{ github.event.inputs.force_push }}"
          
          # Get all tags from Bitbucket
          git tag -l > bitbucket_tags.txt
          
          if [ -s bitbucket_tags.txt ]; then
            echo "üìä Found $(wc -l < bitbucket_tags.txt) tags to sync"
            
            while IFS= read -r TAG; do
              echo "üè∑Ô∏è  Syncing tag: $TAG"
              
              if [ "$FORCE_PUSH" = "true" ]; then
                PUSH_ARGS="--force"
              else
                PUSH_ARGS=""
              fi
              
              if git push "https://x-access-token:${GH_PAT}@github.com/grosvenorsystems/propman.git" refs/tags/"$TAG":refs/tags/"$TAG" $PUSH_ARGS 2>&1; then
                echo "  ‚úÖ Successfully synced tag $TAG"
                TAG_COUNT=$((TAG_COUNT + 1))
              else
                echo "  ‚ùå Failed to sync tag $TAG"
                FAILED_TAGS=$((FAILED_TAGS + 1))
              fi
            done < bitbucket_tags.txt
            
            echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
            echo "üè∑Ô∏è  TAG SYNC SUMMARY"
            echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
            echo "‚úÖ Synced: $TAG_COUNT tags"
            echo "‚ùå Failed: $FAILED_TAGS tags"
          else
            echo "üìù No tags found in Bitbucket repository"
          fi
          
          rm -f bitbucket_tags.txt

      - name: Delete extra branches from GitHub (if enabled)
        if: ${{ github.event.inputs.delete_extra_branches == 'true' }}
        run: |
          echo ""
          echo "üóëÔ∏è  Checking for extra branches to delete..."
          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
          
          DELETED_COUNT=0
          FAILED_DELETES=0
          
          # Get all Bitbucket branches
          git for-each-ref --format='%(refname:strip=3)' refs/remotes/bitbucket/ | grep -v "^HEAD$" > bitbucket_branches.txt
          
          # Get all GitHub branches
          git ls-remote --heads origin | cut -d$'\t' -f2 | sed 's|refs/heads/||' > github_branches.txt
          
          # Find branches that exist on GitHub but not on Bitbucket
          while IFS= read -r GITHUB_BRANCH; do
            if ! grep -q "^$GITHUB_BRANCH$" bitbucket_branches.txt; then
              echo "üóëÔ∏è  Deleting extra branch: $GITHUB_BRANCH"
              
              if git push "https://x-access-token:${GH_PAT}@github.com/grosvenorsystems/propman.git" --delete "$GITHUB_BRANCH" 2>&1; then
                echo "  ‚úÖ Successfully deleted $GITHUB_BRANCH"
                DELETED_COUNT=$((DELETED_COUNT + 1))
              else
                echo "  ‚ùå Failed to delete $GITHUB_BRANCH"
                FAILED_DELETES=$((FAILED_DELETES + 1))
              fi
            fi
          done < github_branches.txt
          
          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
          echo "üóëÔ∏è  BRANCH CLEANUP SUMMARY"
          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
          echo "üóëÔ∏è  Deleted: $DELETED_COUNT branches"
          echo "‚ùå Failed: $FAILED_DELETES deletions"
          
          rm -f bitbucket_branches.txt github_branches.txt
          
          if [ "$FAILED_DELETES" -gt 0 ]; then
            echo ""
            echo "‚ö†Ô∏è  WARNING: Some branch deletions failed!"
          fi

      - name: Final Summary
        run: |
          echo ""
          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
          echo "üéâ FULL MIRROR SYNC COMPLETE"
          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
          echo "üïê Completed at: $(date -u +'%Y-%m-%d %H:%M:%S UTC')"
          echo "üì¶ Repository: Bitbucket ‚Üí GitHub"
          echo "üîÑ Sync type: Full mirror"
          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
          echo ""
          echo "‚úÖ Your GitHub repository is now an exact mirror of Bitbucket!"
          echo "üìù Check the logs above for detailed sync results."
